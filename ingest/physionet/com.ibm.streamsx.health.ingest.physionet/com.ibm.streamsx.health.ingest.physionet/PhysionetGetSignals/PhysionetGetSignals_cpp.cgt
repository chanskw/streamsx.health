/* Additional includes go here */

<%SPL::CodeGen::implementationPrologue($model);%>

<%
my $outputPort0 = $model->getOutputPortAt(0);

## Parameters ##

## recordName
my $recordName = $model->getParameterByName("recordName")->getValueAt(0)->getCppExpression();

## iteration
my $iterationParam = $model->getParameterByName("iterations");
my $iterationCppValue = 0;
if(defined $iterationParam) {
	$iterationCppValue = $iterationParam->getValueAt(0)->getCppExpression();
}

## normalize
my $normalizeParam = $model->getParameterByName("normalize");
my $normalize = '';
if(defined $normalizeParam) {
	$normalize = $normalizeParam->getValueAt(0)->getSPLExpression();
}
%>

#include <wfdb.h>
#include <stdio.h>

#define PHY_LOG "PhysionetGetSignals"

// Constructor
MY_OPERATOR::MY_OPERATOR() {
	// Initialization code goes here
	printf("Constructor \n");
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() {
	// Finalization code goes here
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() {
	// Notifies that all ports are ready. No tuples should be submitted before
	// this. Source operators can use this method to spawn threads.
	printf("AllPortsReady \n");
	createThreads(1); // Create source thread

}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() {
	// This is an asynchronous call
}

// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx) {
	// A typical implementation will loop until shutdown
//      while(!getPE().getShutdownRequested()) {
//          // do work ...
//      }

    
	<% if(defined $iterationParam) {%>
		long count = 0;
		while (count++ < <%=$iterationCppValue%>) {	
	<%} else {%>
		while(true) {
	<%}%>		
			SPLAPPTRC(L_INFO, "Start", PHY_LOG);
			
			int i = 0;
			WFDB_Sample* v;
			WFDB_Siginfo* s;
			
			WFDB_Frequency freq;
	
			char* recordName = strdup(<%=$recordName%>.c_str());
	
			int nsig = isigopen(recordName, NULL, 0);
			if (nsig < 1) {
				SPLAPPTRC(L_ERROR, "Error isigopen, exit", PHY_LOG);
				exit(1);
			}
	
			s = (WFDB_Siginfo *) malloc(nsig * sizeof(WFDB_Siginfo));
	
			if (isigopen(recordName, s, nsig) != nsig) {
				SPLAPPTRC(L_ERROR, "Error isigopen, exit", PHY_LOG);
				exit(1);
			}
	
			freq = sampfreq(recordName);
			
			SPLAPPTRC(L_INFO, "Frequency: " << freq, PHY_LOG);
	
			printRecord(s, nsig);
	
			v = (WFDB_Sample *) malloc(nsig * sizeof(WFDB_Sample));
	
			while (true) {
	
				if (getvec(v) < 0) {
					SPLAPPTRC(L_INFO, "Completed record, break", PHY_LOG);
					break;
				}
	
				// Create the output tuple.
				OPort0Type otuple;
								
		        <%  foreach my $attribute (@{ $outputPort0->getAttributes()}) { %>
		            <% my $name = $attribute->getName(); %>  
		            <% my $operation = $attribute->getAssignmentOutputFunctionName(); %>
		            
		            <%my $attrType = $attribute->getSPLType();%>	
		            <%
						if (SPL::CodeGen::Type::isList($attrType)) {
							$attrType = SPL::CodeGen::Type::getElementType($attrType);
						}
					%>
		            
		            <%if ($operation eq "AsIs") { %>
		                <%my $init = $attribute->getAssignmentValue()->getCppExpression(); %>
		                otuple.set_<%=$name%>(<%=$init%>);
		            <%} elsif($operation eq "getSignals") {%>
						SPL::list< <%=$attrType%> > sigList;
		            	for(int j = 0; j < nsig; ++j) {
		            		sigList.pushBack(static_cast< <%=$attrType%> >((v[j] - s[j].baseline)/s[j].gain));
		            	}		            	
		            	otuple.set_<%=$name%>(sigList);
		            <%} elsif($operation eq "getDescriptions") {%>
		            	SPL::list< SPL::rstring > descList;
		            	for(int j = 0; j < nsig; ++j) {
		            		descList.pushBack(static_cast<rstring>(s[j].desc));
		            	}
						otuple.set_<%=$name%>(descList);
					<%} elsif($operation eq "getFrequency") {%>
						<%my $attrCppType = $attribute->getCppType();%>
						otuple.set_<%=$name%>(static_cast<<%=$attrCppType%>>(freq));	
					<%} elsif($operation eq "getUOMs") {%>
						SPL::list< SPL::rstring > uomList;
						for(int j = 0; j < nsig; ++j) {
							uomList.pushBack(static_cast<rstring>(s[j].units ? s[j].units : "mV"));
						}
						otuple.set_<%=$name%>(uomList);
					<%} elsif($operation eq "getTimestamp") {%>
		            	otuple.set_<%=$name%>((i / freq)*1000);
		            <%}%>
		        <%}%>
				
				
//				<% if($normalize eq 'true') {%>
//					otuple.set_ch1((v[0] - s[0].baseline) / s[0].gain);
//					otuple.set_ch2((v[1] - s[1].baseline) / s[1].gain);
//				<%} else {%>
//					otuple.set_ch1(v[0]);
//					otuple.set_ch2(v[1]);				
//				<%}%>
				submit(otuple, 0);    
				
				i++;
			}
	
			free (recordName);
			free(s);
			free(v);
			wfdbquit();
	
			// submit a window punctuation at the end of each record
			submit(Punctuation::WindowMarker, 0);
		}

}

// Tuple processing for mutating ports 
	void MY_OPERATOR::process(Tuple & tuple, uint32_t port) {
		// Sample submit code
		/* 
		 submit(otuple, 0); // submit to output port 0
		 */
	}

// Tuple processing for non-mutating ports
	void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
		// Sample submit code
		/* 
		 OPort0Type otuple;
		 submit(otuple, 0); // submit to output port 0
		 */
	}

// Punctuation processing
	void MY_OPERATOR::process(Punctuation const & punct, uint32_t port) {
		/*
		 if(punct==Punctuation::WindowMarker) {
		 // ...;
		 } else if(punct==Punctuation::FinalMarker) {
		 // ...;
		 }
		 */
	}

	void MY_OPERATOR::printRecord(WFDB_Siginfo s[], int nsig) {

		for (int i = 0; i < nsig; i++) {
			printf("Group %d, Signal %d:\n", s[i].group, i);
			printf(" File: %s\n", s[i].fname);
			printf(" Description: %s\n", s[i].desc);
			printf(" Gain: ");
			if (s[i].gain == 0.)
				printf("uncalibrated; assume %g", WFDB_DEFGAIN);
			else
				printf("%g", s[i].gain);
			printf(" adu/%s\n", s[i].units);
			printf(" Initial value: %d\n", s[i].initval);
			printf(" Storage format: %d\n", s[i].fmt);
			printf(" I/O: ");
			if (s[i].bsize == 0)
				printf("can be unbuffered\n");
			else
				printf("%d-byte blocks\n", s[i].bsize);
			printf(" ADC resolution: %d bits\n", s[i].adcres);
			printf(" ADC zero: %d\n", s[i].adczero);
			if (s[i].nsamp > 0L) {
				printf(" Length: %s (%ld sample intervals)\n",
						timstr(s[i].nsamp), s[i].nsamp);
				printf(" Checksum: %d\n", s[i].cksum);
			} else
				printf(" Length undefined\n");

		}

	}

	<%SPL::CodeGen::implementationEpilogue($model);%>

