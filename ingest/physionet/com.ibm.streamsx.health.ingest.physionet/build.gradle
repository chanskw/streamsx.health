apply plugin: 'java'
apply from: "$rootProject.projectDir/common.gradle"

def STREAMS_INSTALL = System.getenv("STREAMS_INSTALL")
def jsonToolkitPath = STREAMS_INSTALL + '/toolkits/com.ibm.streamsx.json'
def topologyToolkitPath = STREAMS_INSTALL + '/toolkits/com.ibm.streamsx.topology'
def dateTimeToolkitPath = STREAMS_INSTALL + '/toolkits/com.ibm.streamsx.datetime'

ext.physioProps = new Properties()
physioProps.load(file('./physionet.service.properties').newReader())

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: System.getenv("STREAMS_INSTALL") + '/lib', include: ['*.jar'])
    compile files(System.getenv("STREAMS_INSTALL") + '/toolkits/com.ibm.streamsx.topology/lib/com.ibm.streamsx.topology.jar')
    compile project(':ingest:common:com.ibm.streamsx.health.ingest')
    testCompile 'junit:junit:4.12'
}

sourceSets {
    main {
        java {
            srcDirs = ['impl/java/src']
        }
    }
}

libsDirName = '../lib'

task buildToolkit {
    doLast {
        splMakeToolkit()
    }
}

task buildServices(dependsOn: ':ingest:common:com.ibm.streamsx.health.ingest:buildToolkit') {
    doLast {
        def serviceToolkitPath = "${project(':ingest:common:com.ibm.streamsx.health.ingest').projectDir}" + ':' + ':' + jsonToolkitPath + ':' + topologyToolkitPath + ':' + ':' + dateTimeToolkitPath 
        compileApp('com.ibm.streamsx.health.ingest.physionet.service', 'PhysionetIngestService', serviceToolkitPath) 
    }
}

task execute(type:Exec) {
    commandLine STREAMS_INSTALL + '/bin/streamtool', 'submitjob', 'output/com.ibm.streamsx.health.ingest.physionet.service.PhysionetIngestService/com.ibm.streamsx.health.ingest.physionet.service.PhysionetIngestService.sab', '-P', 'record.name=' + physioProps['recordName'], '-P', 'frequency=' + physioProps['frequency']
}

task cleanToolkit {
    doLast {
        splCleanToolkit()
    }   
}

task deleteDeps(type: Delete) {
    delete 'lib'
    delete 'output'
}

build.dependsOn buildToolkit, buildServices
clean.dependsOn deleteDeps, cleanToolkit
